import os
import datetime
import json
import socket
import threading
import argparse

from termcolor import colored
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from base64 import b64encode, b64decode

class Client:
    def __init__(self, server, port, username):
        self.server = server
        self.port = port
        self.username = username

    def create_connection(self):
        """
        Establishes the socket connection
        with server and port input arguments
        """
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.s.connect((self.server, self.port))
        except Exception as e:
            print(colored('[!] ' + e, 'red'))

        """
        Initial message exchanges for the communication
        Setting up username, keys
        Calling exchange secret and pub key functions
        """
        # Inform the server about the username connected
        self.s.send(self.username.encode())
        print(colored('[+] Connected successfully.', 'yellow'))
        print(colored('[+] Exchanging keys.', 'yellow'))

        # Create key pairs
        self.create_key_pairs()
        # Initial public key exchange
        self.exchange_public_keys()
        # Global variable to hold the secret key for AES encryption
        global secret_key
        # Function to get the secret generated by the server
        secret_key = self.handle_secret()

        print(colored('[+] Initial set up had been completed!', 'yellow'))
        print(colored('[+] Now you can start to exchange messages', 'yellow'))

        # InputHandle for sending messages and MessageHandle thread for receiving messages
        message_handler = threading.Thread(target=self.handle_messages, args=())
        message_handler.start()
        input_handler = threading.Thread(target=self.input_handler, args=())
        input_handler.start()

    # Handle receiving messages
    def handle_messages(self):
        while True:
            message = self.s.recv(1024).decode()
            if message:
                # The secret key to use for AES decryption
                key = secret_key
                # Load the json formatted message
                decrypt_message = json.loads(message)
                # Take out the initialization vector and b64 decode it
                iv = b64decode(decrypt_message['iv'])
                # Take out the ciphertext and b64 decode it
                cipherText = b64decode(decrypt_message['ciphertext'])
                # Create and AES object, parameters: [secret_key], [counter feedback mode], [initialization vector]
                cipher = AES.new(key, AES.MODE_CFB, iv=iv)
                # Use the object to decrypt the ciphertext
                msg = cipher.decrypt(cipherText)
                current_time = datetime.datetime.now()
                # It produces a byte encoded output that has to be decoded to display as string
                print(colored(current_time.strftime('%Y-%m-%d %H:%M:%S ') + msg.decode(), 'green'))
            else:
                print(colored('[!] Lost the connection to the server', 'red'))
                print(colored('[!] Closing down the connection', 'red'))
                os._exit(os.EX_OK)
                self.s.shutdown(socket.SHUT_RDWR)


    # Handle user input and send message
    def input_handler(self):
        while True:
            # Take the input from the user
            message = input()
            # EXIT will close down the client
            if message == "EXIT":
                break
            else:
                key = secret_key
                # Initialize AES object for encryption, parameters: [key], [counter feedback mode]
                cipher = AES.new(key, AES.MODE_CFB)
                # The message what will be sent, containing the username and the user input
                message_to_encrypt = self.username + ": " + message
                # Byte encode it, because AES input must be byte encoded
                msgBytes = message_to_encrypt.encode()
                # Encrypt the message
                encrypted_message = cipher.encrypt(msgBytes)
                # Generate the initialization vector, b64encode it, than utf-8 representation to send
                iv = b64encode(cipher.iv).decode('utf-8')
                # Same process to the encrypted message, to overcome special chars
                message = b64encode(encrypted_message).decode('utf-8')
                # Insert it into a json dictionary
                result = json.dumps({'iv': iv, 'ciphertext': message})
                # Send it in byte encoded form
                self.s.send(result.encode())

        self.s.shutdown(socket.SHUT_RDWR)
        os._exit(os.EX_OK)

    # Receiving the secret key for symmetric encryption
    def handle_secret(self):
        # The secret key coming from the server, and used for encryption and decryption
        secret_key = self.s.recv(1024)
        # Import the client private key to decrypt the secret
        private_key = RSA.importKey(open('client_private_key.pem', 'r').read())
        # Using the client private key to decrypt the secret
        cipher = PKCS1_OAEP.new(private_key)
        return cipher.decrypt(secret_key)

    """
    Send the public key to the server to encrypt the secret
    The secret is generated by the server and used for symmetric encryption
    """
    def exchange_public_keys(self):
        try:
            print(colored('[+] Getting public key from the server', 'blue'))
            server_public_key = self.s.recv(1024).decode()
            server_public_key = RSA.importKey(server_public_key)
            print(colored('[+] Sending public key to server', 'blue'))
            public_pem_key = RSA.importKey(open('client_public_key.pem', 'r').read())
            self.s.send(public_pem_key.exportKey())
            print(colored('[+] Exchange completed!', 'yellow'))
        except Exception as e:
            print(colored('[!] ERROR, you messed up something.... ' + e, 'red'))

    # Generate public and private key pairs
    def create_key_pairs(self):
        try:
            private_key = RSA.generate(2048)
            public_key = private_key.publickey()
            private_pem = private_key.exportKey().decode()
            public_pem = public_key.exportKey().decode()
            # writing private key to pem file
            with open('client_private_key.pem', 'w') as priv:
                priv.write(private_pem)
            # writing public key to pem file
            with open('client_public_key.pem', 'w') as pub:
                pub.write(public_pem)
        except Exception as e:
            print(colored('[!] ERROR, you messed up somethig....' + e, 'red'))


if __name__ == "__main__":
    # Declaring command line Arguments: [server IP], [portNumber], [username]
    arg_parse = argparse.ArgumentParser()
    arg_parse.add_argument('-s', '--server', required=True, help="server to connect")
    arg_parse.add_argument('-p', '--port', required=True, type=int, help="port the server listening on")
    arg_parse.add_argument('-u', '--username', required=True, help="username of the user")
    args = arg_parse.parse_args()
    client = Client(args.server, args.port, args.username)
    client.create_connection()
